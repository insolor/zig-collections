{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Project Documentation","text":""},{"location":"#src/zig_collections.zig","title":"src/zig_collections.zig","text":""},{"location":"#src/zig_collections.zigCounter","title":"pub fn Counter","text":"<pre><code>pub fn Counter(comptime T: type) type\n</code></pre> <p>Generic counter collection for counting occurrences of elements. For string keys (<code>[]const u8</code>), uses <code>StringHashMap</code> internally. For other types, uses general-purpose <code>AutoHashMap</code>.</p>"},{"location":"#src/zig_collections.zigreturn_struct","title":"return struct","text":"Field Description <code>map: CounterMapType(T)</code>"},{"location":"#src/zig_collections.ziginit","title":"pub inline fn init","text":"<pre><code>pub inline fn init(allocator: Allocator) Self\n</code></pre> <p>Creates new counter with given allocator</p>"},{"location":"#src/zig_collections.zigdeinit","title":"pub inline fn deinit","text":"<pre><code>pub inline fn deinit(self: *Self) void\n</code></pre> <p>Frees all allocated memory</p>"},{"location":"#src/zig_collections.ziginc","title":"pub inline fn inc","text":"<pre><code>pub inline fn inc(self: *Self, item: T) !void\n</code></pre> <p>Increments count for item by 1</p>"},{"location":"#src/zig_collections.zigaddFromSlice","title":"pub inline fn addFromSlice","text":"<pre><code>pub inline fn addFromSlice(self: *Self, slice: []const T) !void\n</code></pre> <p>Counts all items in slice</p>"},{"location":"#src/zig_collections.zigaddFromIterator","title":"pub inline fn addFromIterator","text":"<pre><code>pub inline fn addFromIterator(self: *Self, iterator: anytype) !void\n</code></pre> <p>Counts all items from iterator</p>"},{"location":"#src/zig_collections.zigget","title":"pub inline fn get","text":"<pre><code>pub inline fn get(self: Self, key: T) usize\n</code></pre> <p>Returns current count for key (0 if not present)</p>"},{"location":"#src/zig_collections.zigDefaultHashMap","title":"pub fn DefaultHashMap","text":"<pre><code>pub fn DefaultHashMap(\n    comptime K: type,\n    comptime V: type,\n    comptime context: anytype,\n    comptime defaultFactory: fn (@TypeOf(context)) V,\n) type\n</code></pre> <p>Auto-initializing map with default value factory.</p>"},{"location":"#src/zig_collections.zigreturn_struct","title":"return struct","text":"Field Description <code>map: AutoHashMap(K, V)</code>"},{"location":"#src/zig_collections.ziginit","title":"pub inline fn init","text":"<pre><code>pub inline fn init(allocator: Allocator) Self\n</code></pre> <p>Creates new map with given allocator</p>"},{"location":"#src/zig_collections.zigdeinitValues","title":"inline fn deinitValues","text":"<pre><code>inline fn deinitValues(self: *Self) void\n</code></pre> <p>Deinitializes values of the map. Do not use directly.</p>"},{"location":"#src/zig_collections.zigdeinitValuesUnmanaged","title":"inline fn deinitValuesUnmanaged","text":"<pre><code>inline fn deinitValuesUnmanaged(self: *Self, allocator: std.mem.Allocator) void\n</code></pre> <p>Deinitializes values of the map (where values are unmanaged structures). Do not use directly.</p>"},{"location":"#src/zig_collections.zigdeinit","title":"pub inline fn deinit","text":"<pre><code>pub inline fn deinit(self: *Self) void\n</code></pre> <p>Properly deinitializes map and all values</p>"},{"location":"#src/zig_collections.zigdeinitUnmanaged","title":"pub inline fn deinitUnmanaged","text":"<pre><code>pub inline fn deinitUnmanaged(self: *Self, allocator: std.mem.Allocator) void\n</code></pre> <p>Properly deinitializes map and all values (where values are unmanaged structures)</p>"},{"location":"#src/zig_collections.zigget","title":"pub inline fn get","text":"<pre><code>pub inline fn get(self: *Self, key: K) *V\n</code></pre> <p>Returns pointer to value (creates default if missing)</p>"}]}